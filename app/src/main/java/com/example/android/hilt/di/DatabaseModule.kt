package com.example.android.hilt.di




import android.content.Context
import androidx.room.Room
import com.example.android.hilt.data.AppDatabase
import com.example.android.hilt.data.LogDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

//Since LoggerLocalDataSource is scoped to the application container,
// the LogDao binding needs to be available in the application container.
// We specify that requirement using the @InstallIn annotation by passing
// in the class of the Hilt component associated with it (i.e. SingletonComponent:class):
@InstallIn(SingletonComponent::class)
@Module
object DatabaseModule {
    @Provides
    fun provideLogDao(database: AppDatabase): LogDao {
        return database.logDao()
    }
    //Our project doesn't own the AppDatabase class either,
// because it is generated by Room. We can't constructor inject AppDatabase,
// but we can use an @Provides function to provide it, too.
// This is similar to how we build the database instance in the ServiceLocator class:
    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase {
        return Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "logging.db"
        ).build()
    }
}



//The code above tells Hilt that database.logDao()needs to be executed when providing an
// instance of LogDao. Since we have AppDatabase as a transitive dependency,
// we also need to tell Hilt how to provide instances of that type.


//Since we always want Hilt to provide the same database instance,
// we annotate the @Provides provideDatabase() method with @Singleton.
//Each Hilt container comes with a set of default bindings
// that can be injected as dependencies into your custom bindings.
// This is the case with applicationContext. To access it,
// you need to annotate the field with @ApplicationContext.
